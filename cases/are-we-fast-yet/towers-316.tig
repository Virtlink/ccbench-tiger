for i := 0 to 30 do
  (
    let
      type TowersDisk = {
                           size : int, 
                           next : TowersDisk
                        }
      type arrayOfTowersDisk = array of TowersDisk
      var piles : arrayOfTowersDisk := arrayOfTowersDisk[3] of nil
      var movesDone : int := 0
      function pushDisk(disk : TowersDisk, pile : int) =
        let
          var top : TowersDisk := piles[pile]
         in
          disk.next := top;
          piles[pile] := disk
        end
      function popDiskFrom(pile : int) : TowersDisk =
        let
          var top : TowersDisk := piles[pile]
         in
          piles[pile] := top.next;
          top.next := nil;
          top
        end
      function moveTopDisk(fromPile : int, toPile : int) =
        (
          pushDisk(popDiskFrom(fromPile), toPile);
          movesDone := movesDone + 1
        )
      function buildTowerAt(pile : int, disks : int) =
        for i := 0 to disks do
          pushDisk(TowersDisk{ size = i, next = nil }, pile)
      function moveDisks(disks : int, fromPile : int, toPile : int) =
        if disks = 1 then
          moveTopDisk(fromPile, toPile)
        else
          let
            var otherPile : int := (
                                     3 - fromPile
                                   ) - toPile
           in
            moveDisks(disks - 1, fromPile, otherPile);
            moveTopDisk(fromPile, toPile);
            moveDisks(disks - 1, [[ID]], toPile)
          end
     in
      buildTowerAt(0, 13);
      movesDone := 0;
      moveDisks(13, 0, 1);
      movesDone;
      (
      )
    end
  )